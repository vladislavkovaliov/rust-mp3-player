import { Button, VerticalBox, ListView, HorizontalBox } from "std-widgets.slint";

import {ToggleSwitch} from "./toggleSwitch.slint";
import {Progres} from "./progres.slint";
import {PlayButton} from "./playButton.slint";
import {OnlyPlayButton} from "./onlyPlayButton.slint";
import {SheetPanel} from "./sheetPanel.slint";
import { PauseButton } from "./pauseButton.slint";
import { StopButton } from "./stop.slint";
import { PrevButton } from "./prevButton.slint";
import { NextButton } from "./nextButton.slint";
import { EllipsisText } from "ellipsisText.slint";
import { OpenFolderButton } from "./openFolder.slint";
import { VolumeMute } from "./volumeMute.slint";
import { VolumeMinus } from "./volumeMinus.slint";
import { VolumeUp } from "./volumeUp.slint";
import { ControlPanel } from "controlPanel.slint";
import { ExtraControlPanel } from "extraControlPanel.slint";
import { ArrowButton } from "arrowButton.slint";

export struct Record  {
    id: int,
    filePath: string,
    fileName: string,
    duration: string,
}

export component AppWindow inherits Window {
    title: "Player";

    in property <int> volume;
    in-out property <string> album_cover;

    in property <string> path: "";
    in property <[Record]> list: [];

    in-out property <bool> isPlaying: false;
    in-out property <bool> isPausing: false;
    in-out property <bool> expanded;

    in-out property <string> total_duration: "00:00";
    in-out property <string> current_duration: "00:00";
    in-out property <image> poster_path: @image-url("../pictures/fake.png");
    in-out property <string> path_img: "../pictures/fake.png";

    in-out property <int> total_duration_secs: -1;
    in-out property <int> width_percentage: 0;
    in-out property <int> idPlaying: -1;
    in-out property <int> idPrevPlaying: -1;
    in-out property <int> idPausing: -1;

    callback selectPath();
    callback selectRecord(int, string);

    callback stop();
    callback play();
    callback pause();
    callback volumeUp();
    callback volumeDown();
    callback volumeMute();
    callback prev();
    callback next();

    width: 360px;
    height: 588px;
    background: white;

    VerticalLayout {
        padding-bottom: root.expanded ? 96px : 48px;

        animate padding-bottom {
            duration: 300ms;
            easing: ease-in-out;
            delay: 300ms;
        }

        // Text {
        //     text: "Folder path: " + path;
        //     color: black;
        //     font-size: 16px;
        //     vertical-alignment: center;
        //     horizontal-alignment: center;
        // }

        VerticalLayout {
            HorizontalLayout {
                alignment: center;

                Rectangle {
                    width: 200px;
                    height: 200px;
                    border-radius: 8px;
                    Image {
                        source: root.poster_path;
                        width: 200px;
                        height: 200px;
                    }
                }
            }

            ControlPanel {
                id: root.idPlaying;
                idPlaying: root.idPlaying;
                isPausing: root.isPausing;
                prev => {
                    root.prev();
                }
                next => {
                    root.next();
                }
                pause => {
                    root.pause();
                }
                play => {
                    root.play();
                }
            }
        }

        VerticalBox {
            HorizontalLayout {
                Text {
                    vertical-alignment: center;
                    text: "Playlist";
                    font-size: 12px;
                    color: black;
                }
            }
        }

        VerticalLayout {
            padding-right: 8px;
            padding-left: 8px;

            ListView {
                for item in list: TouchArea {
                    VerticalLayout {
                        HorizontalLayout {
                            alignment: space-between;
                            padding-right: 16px;

                            HorizontalLayout {

                                TouchArea {
                                    width: 32px;
                                    height: 32px;
                                    clicked => {
                                        root.selectRecord(item.id, item.filePath);
                                    }
                                    PlayButton {
                                        id: item.id;
                                        idPlaying: root.idPlaying;
                                        isPausing: root.isPausing;
                                    }
                                }

                                Rectangle {
                                    width: 8px;
                                }

                                EllipsisText {
                                    text: item.fileName;
                                }
                            }

                            Text {
                                text: item.duration;
                                color: black;
                                font-size: 12px;
                                vertical-alignment: top;
                            }
                        }

                        Rectangle {
                            width: 100%;
                            height: 6px;

                            VerticalLayout {
                                padding-right: 16px;
                                Rectangle {
                                    height: 4px;
                                }

                                if root.idPlaying == item.id: Progres {
                                    width_percentage: root.width_percentage;
                                }
                            }
                        }

                        Rectangle {
                            height: root.idPlaying == item.id ? 24px : 8px;
                            animate height {
                                duration: 350ms;
                                easing: ease-in-out;
                            }
                        }
                    }
                }
            }
        }
    }

    Rectangle {
        width: 100%;
        height: 96px;
        background: white;
        y: !root.expanded ? parent.height - 48px : parent.height - 96px;

        animate y {
            duration: 300ms;
            easing: ease-in-out;
            delay: 350ms;
        }

        VerticalLayout {
            Rectangle {
                width: parent.width;
                height: 48px;
                background: rgb(254, 227, 227);
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;

                HorizontalLayout {
                    padding-top: 8px;
                    padding-bottom: 8px;
                    padding-left: 8px;
                    padding-right: 16px;
                    alignment: space-between;

                    HorizontalLayout {
                        if root.idPlaying != -1: TouchArea {
                            width: 32px;
                            height: 32px;
                            clicked => {
                                root.selectRecord(root.list[root.idPlaying].id, root.list[root.idPlaying].filePath);
                            }

                            PlayButton {
                                id: root.list[root.idPlaying].id;
                                idPlaying: root.idPlaying;
                                isPausing: root.isPausing;
                            }
                        }

                        Rectangle {
                            width: 8px;
                        }

                        EllipsisText {
                            text: root.list[root.idPausing].fileName;
                        }
                    }

                    ArrowButton {
                        expanded: root.expanded;
                        toggle => {
                            root.expanded = !root.expanded;
                        }
                    }
                }
            }

            VerticalLayout {
                padding-top: 8px;
                padding-bottom: 8px;
                padding-left: 8px;
                padding-right: 8px;
                ExtraControlPanel {
                    volumeDown => {
                        root.volumeDown();
                    }
                    volumeUp => {
                        root.volumeUp();
                    }
                    volumeMute => {
                        root.volumeMute();
                    }
                    selectPath => {
                        root.selectPath();
                    }
                }
            }
        }
    }
}
